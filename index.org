#+SETUPFILE: ./post/html_header.txt
#+TITLE: Emacs for macOS usage
#+AUTHOR:  HO Young Kim
#+OPTIONS: html-style:nil html-scripts:nil html-list-type:unordered num:nil toc:2 H:5
* EMACS
** 한글맞춤법
*** hunspell 설치
    #+begin_src 
    brew install hunspell
    #+end_src
*** 한국어 사전 다운로드
    https://github.com/spellcheck-ko/hunspell-dict-ko/releases
    - ko-aff-dic-0.7.94.zip 파일 다운로드
*** 사전 파일 설치
    다운로드한 사전 파일을 Hunspell이 인식할 수 있는 디렉토리에 복사. 보통 ~/Library/Spelling/ 디렉토리를 사용
    #+begin_src 
    mkdir -p ~/Library/Spelling
    cp hunspell-dict-ko/ko.dic ~/Library/Spelling/ko_KR.dic
    cp hunspell-dict-ko/ko.aff ~/Library/Spelling/ko_KR.aff
    #+end_src
*** Emacs 설정
    - ( ~/.emacs.d/init.el)에 Hunspell과 한국어 사전을 사용할 수 있도록 설정
    #+begin_src 
    ;; Hunspell 설정
    (setq ispell-program-name "hunspell")
    (setq ispell-local-dictionary "ko_KR")
    (setq ispell-local-dictionary-alist
    '(("ko_KR" "[가-힣]" "[^가-힣]" "[-']" nil ("-d" "ko_KR") nil utf-8)))
    ;; Flyspell 모드 활성화
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    #+end_src
    
    #+begin_src 
    ;; use-package 사용 예
    (use-package ispell
      :config
    (setq ispell-program-name "hunspell")
    (setq ispell-local-dictionary "ko_KR")
    (setq ispell-local-dictionary-alist
         '(("ko_KR" "[가-힣]" "[^가-힣]" "[-']" nil ("-d" "ko_KR") nil utf-8))))
    #+end_src
*** flyspell 모드 사용
    - Emacs에서 Flyspell 모드를 사용하여 실시간 맞춤법 검사. 텍스트 모드나 프로그래밍 모드에서 자동 활성화
*** 한글맞춤법 수동검사
    #+begin_src 
    ;; 맞춤법 검사 - 수동 검사
    (defun my-hunspell-check ()
    "Run Hunspell spell check on the current buffer."
    (interactive)
    (ispell-buffer))
    #+end_src
** Function
   - trailing-whitespace 관련
     + 문장 끝의 줄바꿈 표시를 공백으로 대체하여 문장을 연결하고 빈 줄은 유지하는 함수
     #+begin_src emacs-lisp
     (defun my/delete-trailing-whitespace-region (start end)
       "줄 끝의 공백과 탭을 제거,  줄바꿈과 빈 줄 그대로 유지."
       (interactive "r")
       (save-excursion
	 (save-restriction
	   (narrow-to-region start end)
	   (goto-char (point-min))
	   (while (re-search-forward "[ \t]+$" nil t)
             (replace-match "")))))

     (defun my/delete-trailling-whitespace-line-join (&optional start end)
       "줄끝의 줄바꿈을 공백으로 대체하고 줄(라인) 연결, 연속된 빈 줄을 하나로 줄여 유지"
      (interactive)
       (let* ((use-region (use-region-p))
              (start (if use-region (region-beginning) (point-min)))
              (end (if use-region (region-end) (point-max))))
	 (save-excursion
	   (save-restriction
             (narrow-to-region start end)
             (goto-char (point-min))
             (while (re-search-forward "\\([^\n]\\)\\(\n\\)\\([^\n]\\)" nil t)
               (replace-match "\\1 \\3"))
             (goto-char (point-min))
             (while (re-search-forward "\n\n+" nil t)
               (replace-match "\n\n"))))))
      #+end_src
* GITHUB
** github.io 입문
   - Create a repository
     + username.github.io
     + 나머지는 기본값 유지
   - Clone the repository
    #+begin_src 
    - git clone git@github.com:username/username.github.io
    #+end_src
   - add an index.html file
   #+begin_src
   - cd username.github.io
   - echo "Hello World" > index.html
   #+end_src
   -  Push it
    #+begin_src 
    - git add --all
    - git commit -m "Initial commit"
    - git push -u origin main
    #+end_src
** github 입문
   - 새 저장소 생성: Github.com/hy36370637/Docs.git (private 계정. 유료)
     + cd ~/Dropbox/Docs
     + repository 만든 후 안내 내용
    
   #+begin_src 
     $ echo "# Docs" >> README.md
     $ git init
     $ git add README.md   → git add .
     $ git commit -m "first commit"
     $ git branch -M main
     $ git remote add origin git@github.com:hy36370637/Docs.git
     $ git push -u origin main
   #+end_src
** git 개념
*** Git 저장소 생성
    - 폴더와 Git 저장소
      + 일반적인 폴더와 Git 저장소(repository) 차이:  숨겨진 영역 여부
    - 초기화
      + 대상 폴더 이동: cd folder
      + 초기화 명령으로 숨겨진 영역 생성: git init [경로명]    #경로명 입력 없으면 현재 폴더에서 초기화
	#+begin_src 
       $ git init .   #현재 폴더를 의미하는 . 사용할 수도 있음
	#+end_src
*** 워킹 디렉터리
    - 워킹 디렉터리(워킹 트리)란?  - 논리적으로 공간을 분리하여 Git의 동작과 이력 효율적 처리
      + 작업을 하는 공간(working)
      + 임시로 저장하는 공간(stage)
      + 실제 저장하여 기록하는 공간(repository)
    - untracked 상태
      + 워킹 디렉터리(사용자 작업공간)에 새로 생성된 파일은 모두 *추적되지 않음(untracked)* → *기본값*
      + 파일 관리하려면 Git에 추적하라고 통지해야 함
    - tracked 상태
      + 아래의 명령어 실행하여 *추적(tracked)* 상태로 변경
	#+begin_src 
     $ git add
	#+end_src
*** 스테이지(stage)
    - stage=임시 영역
      + 워킹 디렉터리에서 제출된 tracked 파일들을 관리하는 임시영역
      + 파일의 콘텐츠 내용 직접 가지고 있지 않으며 단지 커밋하려는 파일의 추적 상태 정보만 보유  → 커밋 빠르게 위함
      + 파일들의 스테이지 상태
	#+begin_src 
       $ git status
       $ git ls-files --stage
	#+end_src
      + stage 영역에 등록된 파일은 *stage* 상태 vs *unstage* 상태로 구분
      + .gitignore : 버전관리 제외 목록을 담은 파일
    - 파일의 stage상태와 unstage상태
      + 스테이지 영역으로 등록된 파일은 untracked  → tracked 상태로 변경. 스테이지는 워킹 디렉터리에 있는 파일들의 추적 상태를 관리하는 역할 수행
      + 스테이지 영역에 있는 파일과 워킹 디렉터리 안에 있는 파일 내용에 차이 있을 때는 unstage 상태
      + 넓게 보면 아직 스테이지 영역에 등록하지 않은 워킹 디렉터리 안의 파일도 unstage 상태. git add 명령어를 사용하면 스테이지에 다시 추가 가능
    - 파일의 modified 상태와 unmodified 상태
      + 코드를 변경한다는 것은 워킹 디렉터리에서 파일을 *수정* 하는 것 → 워킹 디렉터리와 스테이지 간 내용 불일치
      + 수장한 파일과 원본 파일 구분을 위해: modified vs unmodified 상태
    - modified 상태
      + traced 상태인 파일 수정되면 → 스테이지는 파일 상태를 modified 상태로 변경
      + 수정된 파일은 스테이지에서 잠시 *제외* →  modified 상태 변경된 파일을 git add 명령어로 재등록해야   ~이해 안되는 부분. Magit만 사용해서~
    - unmodified 상태
      + 스테이지에 등록한 후 어떤 수정도 하지 않았다면 unmodified 상태
*** 파일의 상태 확인
    -  status 명령어: Git 상태 확인
     #+begin_src 
    $ git status    ……  상태확인
     #+end_src
*** 파일 관리 목록에서 제외: .gitignore
    - 저장소 폴더의 최상위 디렉터리에 위치해야 함
    - Git에서 관리하지 않는 파일들의 목록
    - .gitignore 파일 표기법
      #+begin_src 
      # : 주석
      ! : 제외하지 않는 파일, 필요한 파일 앞
      * : 모든 문자열
      예: !config.php(config.php제외).
	  /pub/(/pub/ 디렉터리 안의 모든 것을 제외).
	  doc/**/*.txt(doc 디렉터리 아래의 모든 .txt 파일 제외)
      #+end_src
*** Git 저장소 복제
    - 초기화 명령(git init) : 새 저장소를 생성하는 방법 중 하나( 직접 로컬 컴퓨터에 명령어 실행하여 저장소 생성하는 방법)
    - Git 저장소 복제 : 외부의 기존 프로젝트(깃허브)를 기반으로 저장소 생성하는 것
    - 다운로드 vs 복제
      + 웹 사이트(예 깃허브)에 압축 파일을 다운로드(깃의 이력 불포함)
      + Git을 이용하여 저장소 복제하면 최종 코드와 중간에 커밋 같은 변화의 모든 이력도 같이 내려받을 수 있음
    - 복제clone 명령어
    #+begin_src 
    $ git clone 원격저장소URL 새폴더이름
    #+end_src
** magit
   - 소개
   magit은 Emacs를 위한 강력한 Git 인터페이스 패키지입니다. 이 패키지는 Git 버전 관리 시스템을 Emacs 내에서 효율적으로 사용할 수 있게 해줌
     1. 직관적인 인터페이스: Git 작업을 위한 키 바인딩과 메뉴를 제공합니다.
     2. 상태 보기: 현재 Git 저장소의 상태를 쉽게 확인할 수 있습니다.
     3. 스테이징: 파일의 변경 사항을 쉽게 스테이징하고 언스테이징할 수 있습니다.
     4. 커밋: 변경 사항을 빠르게 커밋할 수 있습니다.
     5. 브랜치 관리: 브랜치 생성, 전환, 병합 등을 쉽게 수행할 수 있습니다.
     6. 로그 보기: Git 히스토리를 보기 쉽게 표시합니다.
     7. 리베이스, 체리픽 등: 고급 Git 기능도 지원합니다.

     magit을 사용하면 Git 명령어를 직접 입력하지 않고도 대부분의 Git 작업을 Emacs 내에서 수행할 수 있습니다.
   - 설정
   #+begin_src 
   (use-package magit
     :ensure t
     :bind (("C-x g" . magit-status))
     :config
      (setq magit-auto-revert-mode t))
   #+end_src


   
* 환경
  - emacs for macOS
    + Macbook Air(M1,  macOS 14.6.1),   - emacs-version: 31.0.50,    - org-version : 9.7.10
  - [[https://github.com/hy36370637/BuildEmacs][BuilderScript]] Repository
